<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ninjabot â€“ Reference</title><link>https://rodrigo-brito.github.io/ninjabot/categories/reference/</link><description>Recent content in Reference on Ninjabot</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rodrigo-brito.github.io/ninjabot/categories/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Streategy</title><link>https://rodrigo-brito.github.io/ninjabot/docs/strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rodrigo-brito.github.io/ninjabot/docs/strategy/</guid><description>
&lt;h2 id="strategy-functions">Strategy Functions&lt;/h2>
&lt;p>To create a custom strategy, you need to create a &lt;code>Struct&lt;/code> that implements the following methods:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Strategy&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Timeframe&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">WarmupPeriod&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">Indicators&lt;/span>(&lt;span style="color:#a6e22e">dataframe&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>) []&lt;span style="color:#a6e22e">ChartIndicator&lt;/span>
&lt;span style="color:#a6e22e">OnCandle&lt;/span>(&lt;span style="color:#a6e22e">dataframe&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>, &lt;span style="color:#a6e22e">broker&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Broker&lt;/span>)
&lt;span style="color:#a6e22e">OnPartialCandle&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>, &lt;span style="color:#a6e22e">broker&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Broker&lt;/span>) &lt;span style="color:#75715e">// Optional
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Timeframe&lt;/code>: specifies the strategy timeframe, eg: &amp;ldquo;15m&amp;rdquo;, &amp;ldquo;1h&amp;rdquo;, &amp;ldquo;1d&amp;rdquo;, &amp;ldquo;1w&amp;rdquo;.&lt;/li>
&lt;li>&lt;code>WarmupPeriod&lt;/code>: specifies the number of candles necessary to pre-load before the bot start. For example, if you use a 9-period moving average strategy, the &lt;code>WarmupPeriod&lt;/code> should be 9.&lt;/li>
&lt;li>&lt;code>Indicators&lt;/code>: this function creates custom indicators, it is called for each new candle received. You can also return a list of indicators to display in the chart.&lt;/li>
&lt;li>&lt;code>OnCandle&lt;/code>: this function is also called for each new &lt;strong>closed candle&lt;/strong>, after &lt;code>Indicators&lt;/code> execution. This function should contain your buy and sell rules. &lt;code>Dataframe&lt;/code> object contains indicators and indicators from candles. The buy and sell operations can be performed through the &lt;code>Broker&lt;/code> operator.&lt;/li>
&lt;li>&lt;code>OnPartialCandle&lt;/code>: this functions is optional, it will be called with high frequency, usually called every 2 seconds with partial data of current candle.&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>The following code presents a strategy with a single indicator. We defined an Exponential Moving Average (EMA) of 9 periods. For each candle, we create a buy order when the price closes above the EMA, and sell when the price closes under the EMA.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/service&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/markcheno/go-talib&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">CrossEMA&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">CrossEMA&lt;/span>) &lt;span style="color:#a6e22e">Timeframe&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1d&amp;#34;&lt;/span> &lt;span style="color:#75715e">// examples: 1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">CrossEMA&lt;/span>) &lt;span style="color:#a6e22e">WarmupPeriod&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#75715e">// warmup period, to preload indicators
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">CrossEMA&lt;/span>) &lt;span style="color:#a6e22e">Indicators&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>) []&lt;span style="color:#a6e22e">strategy&lt;/span>.&lt;span style="color:#a6e22e">ChartIndicator&lt;/span> {
&lt;span style="color:#75715e">// define a custom indicator, Exponential Moving Average of 9 periods
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;ema9&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">talib&lt;/span>.&lt;span style="color:#a6e22e">Ema&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>)
&lt;span style="color:#75715e">// (Optional) you can return a list of indicators to include in the final chart
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#a6e22e">strategy&lt;/span>.&lt;span style="color:#a6e22e">ChartIndicator&lt;/span>{
{
&lt;span style="color:#a6e22e">Overlay&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;span style="color:#a6e22e">Time&lt;/span>: &lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>,
&lt;span style="color:#a6e22e">GroupName&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;EMA&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Metrics&lt;/span>: []&lt;span style="color:#a6e22e">strategy&lt;/span>.&lt;span style="color:#a6e22e">IndicatorMetric&lt;/span>{
{
&lt;span style="color:#a6e22e">Values&lt;/span>: &lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;ema9&amp;#34;&lt;/span>],
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;EMA 9&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Color&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Style&lt;/span>: &lt;span style="color:#a6e22e">strategy&lt;/span>.&lt;span style="color:#a6e22e">StyleLine&lt;/span>,
},
},
},
}
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CrossEMA&lt;/span>) &lt;span style="color:#a6e22e">OnCandle&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>, &lt;span style="color:#a6e22e">broker&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Broker&lt;/span>) {
&lt;span style="color:#75715e">// Get the quote and assets information
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assetPosition&lt;/span>, &lt;span style="color:#a6e22e">quotePosition&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">broker&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Pair&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// Check if we have more than 10 USDT available in the wallet and the buy signal is triggered
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">quotePosition&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>.&lt;span style="color:#a6e22e">Crossover&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;ema9&amp;#34;&lt;/span>]) {
&lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">broker&lt;/span>.&lt;span style="color:#a6e22e">CreateOrderMarketQuote&lt;/span>(&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">SideTypeBuy&lt;/span>, &lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Pair&lt;/span>, &lt;span style="color:#a6e22e">quotePosition&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">0.99&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;span style="color:#75715e">// Check if we have position in the pair and the sell signal is triggered
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">assetPosition&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>.&lt;span style="color:#a6e22e">Crossunder&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;ema9&amp;#34;&lt;/span>]) {
&lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">broker&lt;/span>.&lt;span style="color:#a6e22e">CreateOrderMarket&lt;/span>(&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">SideTypeSell&lt;/span>, &lt;span style="color:#a6e22e">df&lt;/span>.&lt;span style="color:#a6e22e">Pair&lt;/span>, &lt;span style="color:#a6e22e">assetPosition&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heikin-ashi-candle-type-support">Heikin Ashi candle type support&lt;/h3>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>CSV Feed exchange
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">csvFeed&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exchange&lt;/span>.&lt;span style="color:#a6e22e">NewCSVFeed&lt;/span>(
&lt;span style="color:#a6e22e">strategy&lt;/span>.&lt;span style="color:#a6e22e">Timeframe&lt;/span>(),
&lt;span style="color:#a6e22e">exchange&lt;/span>.&lt;span style="color:#a6e22e">PairFeed&lt;/span>{
&lt;span style="color:#a6e22e">Pair&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;FTMUSDT&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">File&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;testdata/ftm-1d.csv&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Timeframe&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1d&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">HeikinAshi&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
},
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Binance
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">binance&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exchange&lt;/span>.&lt;span style="color:#a6e22e">NewBinance&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">exchange&lt;/span>.&lt;span style="color:#a6e22e">WithBinanceHeikinAshiCandle&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="high-frequency-trading-hft">High Frequency Trading (HFT)&lt;/h3>
&lt;p>You also have access to partial candle updates through the function &lt;code>OnPartialCandle&lt;/code>. This can be useful for handling high frequency logic, such as using trailing stop or scalping techniques. See an example of usage below. This function is usually called every 2 seconds and may have small time variations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CrossEMA&lt;/span>) &lt;span style="color:#a6e22e">OnPartialCandle&lt;/span>(&lt;span style="color:#a6e22e">df&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>, &lt;span style="color:#a6e22e">broker&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Broker&lt;/span>) {
&lt;span style="color:#75715e">// my logic here...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Ninjabot CLI</title><link>https://rodrigo-brito.github.io/ninjabot/docs/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rodrigo-brito.github.io/ninjabot/docs/cli/</guid><description>
&lt;p>Ninjabot CLI provides utilities commands to support backtesting and bot development.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>You can install CLI with the following command&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go install github.com/rodrigo-brito/ninjabot/cmd/ninjabot@latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or downloading pre-build binaries in &lt;a href="https://github.com/rodrigo-brito/ninjabot/releases">release page&lt;/a>.&lt;/p>
&lt;h2 id="helper-ninjabot--h">Helper (&lt;code>ninjabot -h&lt;/code>)&lt;/h2>
&lt;pre tabindex="0">&lt;code>NAME:
ninjabot - Utilities for bot creation
USAGE:
ninjabot [global options] command [command options] [arguments...]
COMMANDS:
download Download historical data
help, h Shows a list of commands or help for one command
GLOBAL OPTIONS:
--help, -h show help (default: false)
&lt;/code>&lt;/pre>&lt;p>We have the following commands:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>download&lt;/strong>: Download historical data from the binace exchange.&lt;/li>
&lt;/ul>
&lt;h3 id="download-command">Download Command&lt;/h3>
&lt;pre tabindex="0">&lt;code>NAME:
download - Download historical data
USAGE:
download [command options] [arguments...]
OPTIONS:
--pair value, -p value eg. BTCUSDT
--days value, -d value eg. 100 (default 30 days) (default: 0)
--start value, -s value eg. 2021-12-01 (default: &amp;lt;nil&amp;gt;)
--end value, -e value eg. 2020-12-31 (default: &amp;lt;nil&amp;gt;)
--timeframe value, -t value eg. 1h
--output value, -o value eg. ./btc.csv
--help, -h show help (default: false)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Examples of Usage&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Downloading 30 days of historical data for the &lt;strong>BTC/USDT&lt;/strong> pair with 1d timeframe:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ninjabot download --pair BTCUSDT --timeframe 1d --days &lt;span style="color:#ae81ff">30&lt;/span> --output ./btc-1d.csv
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Downloading historical data for the &lt;strong>BTC/USDT&lt;/strong> pair with 1h timeframe and from 2020-12-01 to 2020-12-31:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ninjabot download -p BTCUSDT -t 1h -s &lt;span style="color:#e6db74">&amp;#34;2020-12-01&amp;#34;&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;2020-12-31&amp;#34;&lt;/span> -o ./btc-1h.csv
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Plotting</title><link>https://rodrigo-brito.github.io/ninjabot/docs/ploting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rodrigo-brito.github.io/ninjabot/docs/ploting/</guid><description>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>
&lt;p>To create a chart, you need to import &lt;code>plot&lt;/code> packages.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/plot&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/plot/indicator&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, you can create a chart using &lt;code>plot.NewChart&lt;/code>. The following example creates a chart with 3 indicators. To include indicators, you must pass the options &lt;code>WithCustomIndicators&lt;/code>, in which receives one or more idicators.&lt;/p>
&lt;p>Currently, Ninjabot supports the following indicators in charts:&lt;/p>
&lt;ul>
&lt;li>Exponential Moving Average (EMA)&lt;/li>
&lt;li>Simple Moving Average (SMA)&lt;/li>
&lt;li>Commodity Channel Index (CCI)&lt;/li>
&lt;li>Relative Strength Index (RSI)&lt;/li>
&lt;li>Stochastic Oscillator (STOCH)&lt;/li>
&lt;li>Williams' %R&lt;/li>
&lt;li>Bollinger Bands&lt;/li>
&lt;li>Supertrend&lt;/li>
&lt;/ul>
&lt;p>For each indicator, you need to inform the parameters that are necessary and colors. We accept the color name and HEX code as bellow.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">chart&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">NewChart&lt;/span>(
&lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">WithCustomIndicators&lt;/span>( &lt;span style="color:#75715e">// Optional parameter to include indicators
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">indicator&lt;/span>.&lt;span style="color:#a6e22e">EMA&lt;/span>(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>),
&lt;span style="color:#a6e22e">indicator&lt;/span>.&lt;span style="color:#a6e22e">EMA&lt;/span>(&lt;span style="color:#ae81ff">21&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;#000&amp;#34;&lt;/span>),
&lt;span style="color:#a6e22e">indicator&lt;/span>.&lt;span style="color:#a6e22e">RSI&lt;/span>(&lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;purple&amp;#34;&lt;/span>),
&lt;span style="color:#a6e22e">indicator&lt;/span>.&lt;span style="color:#a6e22e">Stoch&lt;/span>(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>),
),
&lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">WithStrategyIndicators&lt;/span>(&lt;span style="color:#a6e22e">strategy&lt;/span>), &lt;span style="color:#75715e">// Optional parameter to include indicators from your strategy
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">WithPaperWallet&lt;/span>(&lt;span style="color:#a6e22e">wallet&lt;/span>), &lt;span style="color:#75715e">// Optional parameter to include portfolio results (drawdown, equity evolution, etc)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">WithPort&lt;/span>(&lt;span style="color:#ae81ff">8080&lt;/span>), &lt;span style="color:#75715e">// Optional parameter to customize the port number
&lt;/span>&lt;span style="color:#75715e">&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we need to connect our chart to Ninjabot data feed. The chart needs to receive candles and orders processed by ninjabot. We use a pattern called &lt;code>pub/sub&lt;/code>. Then, to receive this data, we need to include the chart object in the &lt;strong>Order Subscription&lt;/strong> and &lt;strong>Candle Subscription&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">bot&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">NewBot&lt;/span>(
&lt;span style="color:#a6e22e">ctx&lt;/span>,
&lt;span style="color:#a6e22e">settings&lt;/span>,
&lt;span style="color:#a6e22e">wallet&lt;/span>,
&lt;span style="color:#a6e22e">strategy&lt;/span>,
&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">WithBacktest&lt;/span>(&lt;span style="color:#a6e22e">wallet&lt;/span>),
&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">WithStorage&lt;/span>(&lt;span style="color:#a6e22e">storage&lt;/span>),
&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">WithLogLevel&lt;/span>(&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">WarnLevel&lt;/span>),
&lt;span style="color:#75715e">// chart settings
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">WithCandleSubscription&lt;/span>(&lt;span style="color:#a6e22e">chart&lt;/span>),
&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">WithOrderSubscription&lt;/span>(&lt;span style="color:#a6e22e">chart&lt;/span>),
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this way, when Ninjabot receives a candle or process an order, it will be sent to the chart. Finally, we need to start the bot. This command will start a HTTP server and display the result in the browser.
The default address are &lt;code>http://localhost:8080&lt;/code>. But you can change it by passing the &lt;code>plot.WithPort(portNumber)&lt;/code> option.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">chart&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="final-result">Final Result&lt;/h3>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/7620947/150690553-1d1db358-2b05-42eb-8909-2bf254a2460b.png" alt="Chart Result">&lt;/p>
&lt;h2 id="custom-indicators">Custom Indicators&lt;/h2>
&lt;p>You can create custom indicators. An indicator is a &lt;code>struct&lt;/code> that implements the &lt;code>plot.Indicator&lt;/code> interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Indicator&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Name&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// indicator name
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Overlay&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// set if the indicator overlay the candlestick chart
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Metrics&lt;/span>() []&lt;span style="color:#a6e22e">IndicatorMetric&lt;/span> &lt;span style="color:#75715e">// returns the indicator metrics (lines, bars, etc) and styles
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#a6e22e">dataframe&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>) &lt;span style="color:#75715e">// constructor that initialize the indicator with a dataframe
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following example creates a custom indicator called &lt;code>EMA&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">indicator&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/model&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/plot&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/markcheno/go-talib&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">EMA&lt;/span>(&lt;span style="color:#a6e22e">period&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">Indicator&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ema&lt;/span>{
&lt;span style="color:#a6e22e">Period&lt;/span>: &lt;span style="color:#a6e22e">period&lt;/span>,
&lt;span style="color:#a6e22e">Color&lt;/span>: &lt;span style="color:#a6e22e">color&lt;/span>,
}
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ema&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Period&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">Color&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Values&lt;/span> &lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Series&lt;/span>
&lt;span style="color:#a6e22e">Time&lt;/span> []&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">ema&lt;/span>) &lt;span style="color:#a6e22e">Name&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;EMA(%d)&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Period&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">ema&lt;/span>) &lt;span style="color:#a6e22e">Overlay&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ema&lt;/span>) &lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#a6e22e">dataframe&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Dataframe&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">dataframe&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &amp;lt; &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Period&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span> = &lt;span style="color:#a6e22e">talib&lt;/span>.&lt;span style="color:#a6e22e">Ema&lt;/span>(&lt;span style="color:#a6e22e">dataframe&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Period&lt;/span>)[&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Period&lt;/span>:]
&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> = &lt;span style="color:#a6e22e">dataframe&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>[&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Period&lt;/span>:]
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">ema&lt;/span>) &lt;span style="color:#a6e22e">Metrics&lt;/span>() []&lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">IndicatorMetric&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#a6e22e">plot&lt;/span>.&lt;span style="color:#a6e22e">IndicatorMetric&lt;/span>{
{
&lt;span style="color:#a6e22e">Style&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;line&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Color&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Color&lt;/span>,
&lt;span style="color:#a6e22e">Values&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span>,
&lt;span style="color:#a6e22e">Time&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>,
},
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Storage</title><link>https://rodrigo-brito.github.io/ninjabot/docs/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rodrigo-brito.github.io/ninjabot/docs/storage/</guid><description>
&lt;h2 id="support">Support&lt;/h2>
&lt;p>Currently it is possible to use different types of storage, to be a valid storage just sign the following interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Storage&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">CreateOrder&lt;/span>(&lt;span style="color:#a6e22e">order&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#a6e22e">UpdateOrder&lt;/span>(&lt;span style="color:#a6e22e">order&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#a6e22e">Orders&lt;/span>(&lt;span style="color:#a6e22e">filters&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">OrderFilter&lt;/span>) ([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A storage can be customized at bot startup time, with the option &lt;code>WithStorage(storage)&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">bot&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">NewBot&lt;/span>(
&lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">WithStorage&lt;/span>(&lt;span style="color:#a6e22e">storage&lt;/span>),
&lt;span style="color:#75715e">// other options...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="memory-storage">Memory Storage&lt;/h3>
&lt;p>An in-memory storage is recommended for backtesting and for situations where you don&amp;rsquo;t want to keep the data in the long term, all data is erased after finishing the execution.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/storage&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">storage&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">FromMemory&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="file-storage">File Storage&lt;/h3>
&lt;p>A simple file storage format that saves your history in JSON format via BuntDB&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/rodrigo-brito/ninjabot/storage&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">storage&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">FromFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;orders.db&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sql-storage">SQL Storage&lt;/h3>
&lt;p>With SQL Storage you can use relational databases like MySQL, Postgress, SQLite and others. It uses Gorm and the configuration options can be checked &lt;a href="https://gorm.io/docs/connecting_to_the_database.html">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/mysql&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;gorm.io/gorm&amp;#34;&lt;/span>
)
&lt;span style="color:#a6e22e">dsn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;amp;parseTime=True&amp;amp;loc=Local&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">storage&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">FromFile&lt;/span>(&lt;span style="color:#a6e22e">mysql&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">dsn&lt;/span>), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{})
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Telegram</title><link>https://rodrigo-brito.github.io/ninjabot/docs/telegram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rodrigo-brito.github.io/ninjabot/docs/telegram/</guid><description>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>To set up a Telegram bot, you should follow these steps:&lt;/p>
&lt;h3 id="create-a-new-bot-in-your-telegram-account">Create a new bot in your Telegram account&lt;/h3>
&lt;p>You can create bots in telegram accessing &lt;a href="https://telegram.me/BotFather">BotFather&lt;/a>.&lt;/p>
&lt;p>Send the message &lt;code>/newbot&lt;/code>.&lt;/p>
&lt;p>BotFather response:&lt;/p>
&lt;blockquote>
&lt;p>Alright, a new bot. How are we going to call it? Please choose a name for your bot.&lt;/p>
&lt;/blockquote>
&lt;p>Choose the public name of your bot (e.x. &lt;code>NinjaBot&lt;/code>)&lt;/p>
&lt;p>BotFather response:&lt;/p>
&lt;blockquote>
&lt;p>Good. Now let&amp;rsquo;s choose a username for your bot. It must end in bot. Like this, for example: TetrisBot or tetris_bot.&lt;/p>
&lt;/blockquote>
&lt;p>Choose the name id of your bot and send it to the BotFather (e.g. &lt;code>my_ninjabot_bot&lt;/code>)&lt;/p>
&lt;p>BotFather response:&lt;/p>
&lt;blockquote>
&lt;p>Done! Congratulations on your new bot. You will find it at t.me/my_ninjabot_bot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when you&amp;rsquo;ve finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.&lt;br>
Use this token to access the HTTP API: &lt;code>111111:ABCDEFGH&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Copy the API Token (&lt;code>111111:ABCDEFGH&lt;/code> in the above example) and store it in a safe place.&lt;/p>
&lt;h3 id="discovering-your-id">Discovering your ID&lt;/h3>
&lt;p>Ninjabot requires your account ID to limit the access of the bot to your account.&lt;/p>
&lt;p>Talk to the &lt;a href="https://telegram.me/userinfobot">userinfobot&lt;/a> and send the command &lt;code>/start&lt;/code> to get your ID.&lt;/p>
&lt;p>Example of bot respose:&lt;/p>
&lt;blockquote>
&lt;p>@example&lt;br>
Id: 12345&lt;br>
First: Foo&lt;br>
Last: Bar&lt;br>
Lang: en&lt;/p>
&lt;/blockquote>
&lt;p>Get your &amp;ldquo;Id&amp;rdquo; and store in a safe place.&lt;/p>
&lt;h3 id="setup-ninjabot">Setup NinjaBot&lt;/h3>
&lt;p>With your ID and API Token, you can now setup NinjaBot, the bot settings are place in &lt;code>ninjabot.Settings&lt;/code> as follow:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">settings&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">Settings&lt;/span>{
&lt;span style="color:#a6e22e">Pairs&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;BTCUSDT&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;ETHUSDT&amp;#34;&lt;/span>,
},
&lt;span style="color:#a6e22e">Telegram&lt;/span>: &lt;span style="color:#a6e22e">ninjabot&lt;/span>.&lt;span style="color:#a6e22e">TelegramSettings&lt;/span>{
&lt;span style="color:#a6e22e">Enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;span style="color:#a6e22e">Token&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;111111:ABCDEFGH&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Users&lt;/span>: []&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">12345&lt;/span>},
},
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Telegram bot requires that your bot is &lt;code>running&lt;/code> to control and get information about your account.&lt;/p>
&lt;p>We have the following commands:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/help&lt;/code> - Display help instructions&lt;/li>
&lt;li>&lt;code>/stop&lt;/code> - Stop buy and sell coins&lt;/li>
&lt;li>&lt;code>/start&lt;/code> - Start buy and sell coins&lt;/li>
&lt;li>&lt;code>/status&lt;/code> - Check bot status&lt;/li>
&lt;li>&lt;code>/balance&lt;/code> - Wallet balance&lt;/li>
&lt;li>&lt;code>/profit&lt;/code> - Summary of last trade results&lt;/li>
&lt;li>&lt;code>/buy&lt;/code> - open a buy order&lt;/li>
&lt;li>&lt;code>/sell&lt;/code> - open a sell order&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/7620947/150681951-f81c83ae-203e-4b48-8fba-14c59c08abb4.gif" alt="telegram">&lt;/p></description></item></channel></rss>